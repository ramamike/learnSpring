1) spring.io -> guides -> mvc
2) Navigate to https://start.spring.io
        make template
        - maven project
        - java
        - group , com.task
        - artifact, blog
        - no dependencies
        - generate.
3) open template in IntellijtIdea
4) pom.xml -> insert dependencies -> import changes (sinchonize)
        -thymeleaf -> шаблонизатор, to show data on HTML from controller
        -starded-web -> operating as MVC
        -devtools -> start local server
        <dependencies>
5) Create a Web Controller
        - main -> java -> package -> new package "Controllers"
        - Class "MainController -> past from https://spring.io/guides/gs/serving                -web-content/
6) Modify MainrController
    public String home(Model model) {
        model.addAttribute("title", "Главная страница");
        return "home";
    }

7) create template of HTML from guides
        (Create a Web Controlleri)
        Thymeleaf parses the xxxx.html template and evaluates the th:text expression to render the value of the ${name} parameter that was set in the controller.The following listing (from src/main/resources/templates/XXX.html) shows the XXX.html template:

<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title th:text="${title}" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
</head>
<body>
   <p th:text="'Hello, ' + ${title} + '!'" />
</body>
7) Aplication.proparties -> server.port = 8081
8) Run Task2Aplication
9) Brauser -> localhost:8081
10) Cteate home https://getbootstrap.com/ - framework of styles for sites
11) add styles from https://www.bootstrapcdn.com/
        copy for css
        ttps://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css
12) Work with mySQL
    - https://spring.io/guides/gs/accessing-data-mysql/
13) mySQL (Soource: https://timeweb.com/ru/community/articles/kak-ustanovit-stek-lamp-na-ubuntu-20-04)
    - install mySQL
        sudo apt update && sudo apt install mysql-server
            sudo service mysql status
    - settings security for mySQL
        sudo mysql_secure_installation
            sudo mysql
14) Installing Nginx
        https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04

    - sudo apt install nginx

----Adjusting the Firewall
    sudo ufw app list

----It is recommended that you enable the most restrictive profile 
    that will still allow the traffic you’ve configured. Right now, 
    we will only need to allow traffic on port 80.

    sudo ufw allow 'Nginx HTTP'

----Step 4 – Managing the Nginx Process
    Now that you have your web server up and running,
     let’s review some basic management commands.

----To stop your web server, type:

    sudo systemctl stop nginx
    
----To start the web server when it is stopped, type:

    sudo systemctl start nginx
    
----To stop and then start the service again, type:

    sudo systemctl restart nginx
    
----If you are only making configuration changes, 
    Nginx can often reload without dropping connections. To do this, type:

    sudo systemctl reload nginx
    
----By default, Nginx is configured to start automatically 
    when the server boots. If this is not what you want, 
    you can disable this behavior by typing:

    sudo systemctl disable nginx
    
----To re-enable the service to start up at boot, you can type:

    sudo systemctl enable nginx

